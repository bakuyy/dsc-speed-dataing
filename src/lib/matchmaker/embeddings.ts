import "dotenv/config"; // local environment variables
import dotenv from "dotenv";
import OpenAI from "openai"; // for vector embeddings
import { getMCAnswer } from "./multipleChoiceMap.js"; // multiple choice answers
import { supabase } from '../supabase.js'; // supabase tables
import { v4 as uuidv4 } from 'uuid'; // generating uuids
import { cosineSimilarity } from "./similarity.js"; // vector comparisons

dotenv.config();

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

interface Participant {
  // Primary key in form_responses
  id: string;
  // Basic info
  email: string;
  name: string;
  pronouns: string;
  program: string; // used for vector embedding
  year: string; // used for vector embedding
  social_media_links: string;
  // Open-ended responses
  // Career
  career: string; // used for vector embedding
  // Friendship
  friend_traits: string; // used for vector embedding
  self_desc: string; // used for vector embedding
  goal: string; // used for vector embedding
  // Interests
  fun: string; // used for vector embedding
  music: string; // used for vector embedding
  // Multiple choice: [a, b, c, d, e]
  class_seat: "a" | "b" | "c" | "d" | "e"; // used for vector embedding
  evil_hobby: "a" | "b" | "c" | "d" | "e"; // used for vector embedding
  most_likely_to: "a" | "b" | "c" | "d" | "e"; // used for vector embedding
  caught_watching: "a" | "b" | "c" | "d" | "e"; // used for vector embedding
  // Vector embedding for participant, generated by the OpenAI embeddings API.
  vector_embedding?: number[];
}

interface Match {
  person1_id: string;       // FK to form_responses.id
  person2_id: string;       // FK to form_responses.id
  similarity_score: number; // cosine similarity
  emoji: string;            // hex for generated emoji
}

// HARD-CODED odd participant to be pushed to form_responses if there is an odd number of participants.
// Each term, change the NAME of the participant to some exec who is going to be at the event.
// They will be matched with the (2k+1)th person.
const oddId = uuidv4();
const odd_participant: Participant = {
  id: oddId,
  email: "l32he@uwaterloo.ca",
  name: "Lydia He",
  pronouns: "she/her",
  program: "Data Science", // used for vector embedding
  year: "2A", // used for vector embedding
  social_media_links: "https://www.linkedin.com/in/lydiahe2005/",
  career: "Ideally quant, currently SWE. ", // used for vector embedding
  friend_traits: "A calm and respectful friend. ", // used for vector embedding
  self_desc: "Peculiar. ", // used for vector embedding
  goal: "To play chess with someone. ", // used for vector embedding
  fun: "Play chess, osu. ", // used for vector embedding
  music: "Lana Del Rey. ", // used for vector embedding
  class_seat: "e", // used for vector embedding
  evil_hobby: "c", // used for vector embedding
  most_likely_to: "a", // used for vector embedding
  caught_watching: "a", // used for vector embedding
  // Hard-coded vector, don't delete this.
  vector_embedding: [-0.01591183990240097,-0.034576255828142166,0.010197420604526997,-0.00819737371057272,0.020201677456498146,-0.03557426854968071,-0.00237832497805357,0.026849718764424324,-0.03998483344912529,-0.007569592446088791,0.008257737383246422,-0.010664232075214386,-0.0193968303501606,0.008515289053320885,0.045361217111349106,0.008523337543010712,-0.027219949290156364,-0.03476941958069801,-0.04922448471188545,-0.01462408248335123,0.05901143327355385,0.05231510102748871,0.024081043899059296,-0.0012555624125525355,0.0465523898601532,0.0034045057836920023,0.02319571003317833,0.005464915651828051,-0.0011911746114492416,-0.0177710372954607,0.052379488945007324,-0.014583840034902096,-0.020282162353396416,-0.025497574359178543,0.030133496969938278,-0.006462926976382732,0.0031248212326318026,-0.02107091248035431,0.035187941044569016,0.023598134517669678,-0.02295425720512867,-0.0018139254534617066,0.011726630851626396,0.008402610197663307,0.0547296442091465,0.006044406443834305,-0.04503927752375603,-0.018608078360557556,0.020475326105952263,0.023839589208364487,-0.06255276501178741,0.0204270351678133,0.012298072688281536,0.1188599094748497,0.042045243084430695,0.0015090894885361195,0.01894611492753029,0.03364263474941254,0.008217494934797287,-0.016917899250984192,-0.005251631140708923,-0.02438688464462757,0.0056138127110898495,0.019541701301932335,-0.0059920912608504295,-0.02319571003317833,-0.0047888439148664474,0.011010316200554371,0.03134077042341232,0.002495027845725417,0.02255183272063732,0.03927656635642052,0.007863362319767475,0.005839169956743717,0.01166224293410778,-0.02433859370648861,-0.016853511333465576,0.012740738689899445,0.002599657978862524,-0.021103106439113617,-0.015026506967842579,0.02319571003317833,0.017674455419182777,-0.004998104181140661,-0.026849718764424324,-0.02528831548988819,-0.0726938471198082,-0.055856429040431976,-0.029682783409953117,-0.029924238100647926,-0.021457239985466003,-0.05926898494362831,-0.027783341705799103,-0.03766687214374542,0.020314356312155724,-0.012217587791383266,-0.001307877479121089,0.011919794604182243,0.011694436892867088,-0.01392386481165886,-0.0013410774990916252,-0.030117399990558624,-0.004696286283433437,-0.0243063997477293,0.05543791130185127,0.012821223586797714,-0.015026506967842579,-0.003525232896208763,-0.022986451163887978,-0.03275730088353157,-0.13077165186405182,0.0075414227321743965,0.0018923981115221977,-0.012982193380594254,-0.039888251572847366,0.006615848280489445,0.044298816472291946,-0.06715649366378784,0.03393238037824631,-0.016837414354085922,0.007976040244102478,0.03050372749567032,0.03682982921600342,-0.0316627100110054,-0.03042324259877205,0.010165226645767689,0.013690459541976452,-0.057852450758218765,-0.004700310528278351,-0.007887507788836956,-0.03525232896208763,-0.012459042482078075,0.07919701188802719,-0.053763825446367264,-0.009827190078794956,0.014197513461112976,-0.022535735741257668,-0.004070517141371965,-0.011106898076832294,-0.0204270351678133,-0.025626350194215775,0.03818197548389435,0.04590851441025734,0.016853511333465576,-0.03422212228178978,-0.05080198496580124,0.01348119881004095,0.038536109030246735,0.01997631974518299,-0.001267635147087276,0.00012305367272347212,0.03615375980734825,-0.04040335491299629,-0.020394841209053993,0.027831632643938065,-0.03940534219145775,0.020394841209053993,0.027461403980851173,0.01567843370139599,-0.034608449786901474,0.012225636281073093,0.033674828708171844,-0.014414822682738304,-0.037022992968559265,0.05714418739080429,0.0008003204129636288,-0.0424637645483017,-0.025658544152975082,-0.050673212856054306,-0.006656090263277292,-0.016185486689209938,-0.038214169442653656,0.029505716636776924,-0.012764884158968925,0.03666885942220688,0.012515381909906864,0.02969888038933277,-0.0022757069673389196,-0.015123087912797928,-0.0343187041580677,-0.07101976126432419,0.040338966995477676,-0.020926039665937424,-0.004124844446778297,-0.020201677456498146,0.011839309707283974,0.011501274071633816,0.029924238100647926,0.0077667804434895515,0.025272218510508537,-0.001497016754001379,0.07462547719478607,0.01748129166662693,0.007746659219264984,0.014559694565832615,-0.046166062355041504,0.015219669789075851,0.03262852504849434,-0.013778992928564548,0.04745382070541382,0.033835798501968384,0.02911938913166523,0.0075333742424845695,-0.007955919951200485,-0.0028471488039940596,0.023823492228984833,0.018398817628622055,0.01174272783100605,-0.01260391529649496,-0.003746566129848361,0.08164375275373459,0.0007414659485220909,0.021634306758642197,0.0076742228120565414,-0.05714418739080429,0.06812231242656708,-0.017014481127262115,0.04558657482266426,0.018801242113113403,0.05640372633934021,-0.034447479993104935,0.013545586727559566,0.04062871262431145,0.002551367273554206,0.0028149548452347517,0.018028588965535164,0.043848101049661636,-0.03795661777257919,0.027590179815888405,-0.04114381596446037,0.04014580324292183,-0.0469709113240242,-0.0259321928024292,-0.019219763576984406,0.021425046026706696,0.0047727469354867935,-0.009634027257561684,-0.00429788650944829,-0.002179125091060996,0.0101088872179389,0.031099315732717514,-0.028330639004707336,0.013674362562596798,0.02776724472641945,0.030970539897680283,-0.013601926155388355,-0.02377520129084587,-0.042206212878227234,-0.046133868396282196,0.012080764397978783,0.020861651748418808,-0.017175449058413506,-0.008273834362626076,0.00880503375083208,-0.02197234146296978,-0.018801242113113403,-0.006136963609606028,0.032821688801050186,0.03185587003827095,-0.004945788998156786,-0.004020214080810547,-0.024676630273461342,-0.017948104068636894,-0.016756929457187653,-0.024853697046637535,-0.01059984415769577,0.005963921546936035,-0.019702671095728874,-0.028523802757263184,-0.06516046822071075,0.010632038116455078,0.005955873057246208,-0.019622186198830605,0.01628206856548786,-0.021167494356632233,-0.02136065810918808,0.0355420745909214,-0.002565452130511403,-0.013440956361591816,0.015766967087984085,-0.04169110953807831,0.007074611261487007,0.02316351607441902,-0.009794996120035648,0.02965058945119381,0.018849533051252365,0.027783341705799103,0.02074897289276123,0.005762709304690361,0.007179241627454758,-0.02393617108464241,-0.026656555011868477,-0.01166224293410778,-0.019332442432641983,0.021634306758642197,-0.008020306937396526,0.0016086893156170845,-0.029972529038786888,-0.058464135974645615,-0.014744809828698635,0.04623045027256012,-0.029393037781119347,0.001346107805147767,0.03499477729201317,0.009939868934452534,0.009811093099415302,-0.010720571503043175,0.043880295008420944,-0.002203270560130477,-0.029296455904841423,-0.02279328741133213,0.03908340260386467,0.022085020318627357,-0.020362647250294685,-0.06792914867401123,-0.010133032687008381,0.004342153202742338,0.017207643017172813,-0.003951802384108305,-0.04365493729710579,-0.01068032905459404,-0.06158694624900818,0.029055001214146614,-0.03618595376610756,-0.004050395917147398,-0.005110783036798239,0.00924769975244999,0.014640179462730885,0.005670152138918638,-0.04210963100194931,0.028040893375873566,-0.019750962033867836,-0.020861651748418808,-0.011734679341316223,0.014350434765219688,-0.015115039423108101,0.02414543181657791,0.02895841933786869,0.014841391704976559,0.06406587362289429,-0.07765170931816101,-0.04680994153022766,-0.05852852389216423,-0.007448865566402674,-0.039019014686346054,-0.007384477648884058,0.03602498397231102,0.034737225621938705,-0.025948289781808853,0.015565754845738411,-0.03201683983206749,-0.021779179573059082,-0.0029034879989922047,-0.012281975708901882,-0.016901802271604538,-0.046584583818912506,-0.0147045673802495,-0.02409714087843895,0.0031389060895889997,0.0023400946520268917,0.006684259977191687,0.02438688464462757,0.011428837664425373,0.003177136182785034,-0.006350248120725155,0.06728526949882507,-0.06947445124387741,0.007364356424659491,0.01944512128829956,-0.03193635493516922,0.0020000464282929897,-0.01421361044049263,-0.014125077053904533,-0.016274020075798035,-0.001364216790534556,-0.024032752960920334,0.026640458032488823,0.04114381596446037,0.00524760689586401,0.05698321759700775,0.01870466023683548,0.02197234146296978,0.003857232630252838,-0.04677774757146835,0.02165040373802185,0.04961081221699715,0.0007409629179164767,-0.04600509628653526,-0.037634678184986115,0.0011388595448806882,0.016402795910835266,0.007963967509567738,0.03850391507148743,-0.005561497528105974,0.025948289781808853,-0.012708544731140137,0.04854841157793999,-0.008756742812693119,-0.0021087010391056538,-0.006829132791608572,0.013939961791038513,-0.03361044079065323,-0.015267960727214813,-0.04239937663078308,-0.009915723465383053,0.0000963302081800066,0.041304782032966614,0.023099128156900406,-0.00496188597753644,0.011131043545901775,0.0017424952238798141,-0.016837414354085922,0.05598520487546921,0.0015664348611608148,0.006776817608624697,-0.03377141058444977,0.03647569939494133,0.018801242113113403,-0.016080856323242188,0.074303537607193,-0.015839403495192528,-0.05311994627118111,-0.03480161353945732,0.023920074105262756,0.03843952715396881,0.03341727703809738,0.05926898494362831,-0.005311994813382626,-0.016346456483006477,0.01249928493052721,-0.0009919748408719897,0.011219576932489872,0.019219763576984406,0.0007082659867592156,-0.01000425685197115,-0.0030946393962949514,0.00894185807555914,0.0371517688035965,-0.02678533084690571,0.013851429335772991,-0.056339338421821594,0.023517649620771408,-0.03357824683189392,0.030825667083263397,-0.030213981866836548,0.025835610926151276,-0.0037204085383564234,-0.06487072259187698,-0.021859662607312202,-0.014084834605455399,0.023598134517669678,-0.03773126006126404,0.009006245993077755,0.034576255828142166,0.0027203853242099285,-0.007364356424659491,0.048097699880599976,-0.03660447150468826,0.019461218267679214,0.029312552884221077,-0.030584212392568588,0.0243063997477293,0.001089562545530498,-0.016201583668589592,-0.01678912341594696,-0.0017535618972033262,-0.01849539950489998,-0.014849440194666386,0.03222610056400299,0.013328277505934238,-0.01437458023428917,-0.010084741748869419,0.04301106184720993,0.0714704766869545,-0.031598322093486786,-0.023582037538290024,-0.01944512128829956,-0.05276581645011902,-0.011469080112874508,-0.019461218267679214,0.02242305688560009,0.0020704707130789757,0.0026982519775629044,0.028234057128429413,-0.010277905501425266,-0.02258402667939663,0.02768676169216633,0.012225636281073093,0.0036721176002174616,-0.008917712606489658,-0.019348539412021637,-0.007384477648884058,0.09529396891593933,-0.02197234146296978,-0.015139184892177582,-0.007879459299147129,-0.04973958805203438,-0.08318905532360077,0.024885891005396843,-0.009867432527244091,0.055244747549295425,-0.02425810880959034,-0.006957908160984516,0.08937028795480728,0.03393238037824631,-0.008644063957035542,-0.03315972536802292,0.004740552976727486,0.0030785424169152975,0.04259254038333893,0.06171572208404541,0.006990102119743824,0.028024796396493912,0.0055977157317101955,-0.006953883916139603,-0.011106898076832294,-0.023549843579530716,0.028974516317248344,-0.015477221459150314,0.019123181700706482,-0.005002128425985575,0.007839216850697994,-0.016563765704631805,0.0022535736206918955,-0.006374393589794636,-0.03544549271464348,-0.00011160974099766463,-0.042495958507061005,-0.0019457193557173014,-0.05823877826333046,0.0062858606688678265,-0.013811186887323856,-0.008756742812693119,0.003613766049966216,-0.012716593220829964,0.046166062355041504,-0.007758731953799725,0.0028572094161063433,0.017658358439803123,-0.007207411341369152,0.015493318438529968,0.043848101049661636,0.04239937663078308,-0.011477128602564335,-0.0032696938142180443,-0.008837227709591389,-0.006965956650674343,-0.0032153665088117123,-0.002346131019294262,-0.0006343206041492522,0.02871696650981903,-0.055244747549295425,0.016145244240760803,-0.005879412405192852,0.023227903991937637,0.03296656161546707,0.010229614563286304,-0.03818197548389435,0.020040707662701607,0.0037204085383564234,0.020169483497738838,-0.019042696803808212,-0.007931774482131004,-0.0065474361181259155,0.012410751543939114,0.045844126492738724,0.003919608425348997,-0.024531757459044456,0.036121565848588943,-0.019300248473882675,-0.014406774193048477,0.009891577996313572,-0.008108840323984623,-0.029521813616156578,-0.015815258026123047,-0.011082752607762814,-0.014366531744599342,-0.013778992928564548,-0.015638191252946854,0.010712523013353348,-0.0009934839326888323,-0.019107084721326828,-0.0175617765635252,-0.010261808522045612,0.01588769443333149,0.019654380157589912,0.06528924405574799,0.04259254038333893,0.0075052049942314625,-0.007183265872299671,0.01699838414788246,-0.026157550513744354,-0.033964574337005615,0.022761093452572823,-0.014036543667316437,-0.006543411873281002,0.019573895260691643,-0.03129247948527336,-0.03905120864510536,0.008957955054938793,0.024209817871451378,0.002827027579769492,-0.024612242355942726,-0.0355420745909214,-0.00763800460845232,-0.00352724501863122,0.006736575160175562,0.006652066018432379,0.003611754160374403,-0.026157550513744354,-0.0057586850598454475,-0.010712523013353348,0.012024424970149994,-0.04455636814236641,-0.028475511819124222,-0.004338128957897425,-0.01870466023683548,-0.01657986268401146,0.008796985261142254,0.004744577221572399,-0.009706463664770126,0.03589620813727379,0.002758615417405963,0.011364449746906757,0.009658172726631165,-0.011404692195355892,-0.01620963215827942,-0.004157038405537605,-0.02385568618774414,0.001418544095940888,-0.005175170488655567,0.011316158808767796,-0.028652578592300415,-0.003581572324037552,0.029296455904841423,-0.006040382198989391,0.0009482111781835556,0.00894185807555914,-0.007493132259696722,0.012853417545557022,0.05778806656599045,-0.010583747178316116,-0.006752672139555216,-0.03214561566710472,0.04101504012942314,-0.025626350194215775,-0.0015422893920913339,0.0193968303501606,-0.017738843336701393,-0.03979166969656944,-0.009891577996313572,-0.030584212392568588,-0.0006433751550503075,-0.002700264099985361,-0.012241733260452747,-0.018817339092493057,-0.023388873785734177,-0.04677774757146835,0.036411311477422714,-0.004342153202742338,0.0001644907461013645,0.0012937926221638918,0.02805699035525322,0.007122902199625969,-0.008684306405484676,0.05910801514983177,0.030455436557531357,-0.02005680464208126,0.013851429335772991,0.029006710276007652,-0.018044685944914818,0.02340497076511383,0.03332069516181946,-0.00976280216127634,0.017867619171738625,-0.00095475057605654,-0.02736482210457325,-0.03126028552651405,0.018350526690483093,0.02364642545580864,0.009754753671586514,-0.025578059256076813,-0.01607280783355236,-0.016966190189123154,-0.002315949182957411,-0.0022374766413122416,0.022358668968081474,-0.018076879903674126,0.019622186198830605,-0.002535270294174552,-0.004058444406837225,0.01580720953643322,-0.0027706881519407034,-0.06998955458402634,0.004330080468207598,-0.05002933368086815,-0.013384616933763027,0.015597948804497719,0.007746659219264984,-0.10688377171754837,-0.025223927572369576,0.0032696938142180443,-0.013191454112529755,-0.031550031155347824,-0.0620698556303978,-0.028700869530439377,0.0010986170964315534,0.003857232630252838,0.03699079900979996,0.011517370119690895,-0.04603728652000427,0.020974330604076385,-0.039759475737810135,0.023710813373327255,-0.006245618220418692,0.003122809110209346,0.002645936794579029,-0.024161528795957565,0.03982386365532875,-0.01846320554614067,-0.019718768075108528,-0.01272464171051979,-0.028765257447957993,-0.060588933527469635,0.02438688464462757,-0.009448911994695663,0.005251631140708923,-0.010607892647385597,-0.04465295001864433,-0.03570304438471794,0.030117399990558624,0.0020785192027688026,0.029682783409953117,-0.03177538886666298,0.01599232293665409,-0.003764674998819828,-0.04442759230732918,-0.0010875504231080413,-0.04162672162055969,-0.01382728386670351,0.00611684238538146,-0.059075821191072464,-0.004680189304053783,0.0015523500042036176,-0.02319571003317833,-0.01315121166408062,-0.0023038764484226704,0.029602298513054848,-0.024161528795957565,-0.016885705292224884,-0.03692641109228134,0.017384709790349007,-0.013263890519738197,0.00791567750275135,-0.015163330361247063,-0.05476183816790581,-0.009634027257561684,-0.03010130301117897,0.026318520307540894,0.041594527661800385,0.04816208779811859,0.044491980224847794,0.0007459932239726186,0.05794903263449669,0.007980064488947392,-0.013513392768800259,0.023066934198141098,-0.011098849587142467,0.0226645115762949,-0.003328045131638646,0.04336519539356232,-0.01894611492753029,-0.019541701301932335,0.012845369055867195,0.016756929457187653,0.00003621814539656043,0.0025895973667502403,0.01963828317821026,0.0007324113976210356,0.0021771129686385393,0.01936463639140129,0.0008229567902162671,0.0018330406164750457,-0.010994219221174717,-0.01886563003063202,0.036121565848588943,0.048451829701662064,0.004338128957897425,-0.011187382973730564,-0.03214561566710472,-0.004442759323865175,-0.010036450810730457,-0.030745182186365128,-0.023421067744493484,0.007042417302727699,0.023388873785734177,0.02045922912657261,-0.06448439508676529,-0.014616033993661404,0.07642833888530731,0.0073724049143493176,0.03522013500332832,0.014913828112185001,0.04359055310487747,0.007819095626473427,-0.011533467099070549,-0.016933996230363846,0.02882964536547661,-0.03711957484483719,-0.005239558406174183,0.014937973581254482,0.010173275135457516,0.007919701747596264,0.03132467344403267,0.040660906583070755,-0.017368612810969353,0.028684772551059723,-0.0016026529483497143,0.0016489317640662193,-0.003209330141544342,0.013191454112529755,-0.0026881913654506207,0.03917998448014259,-0.016756929457187653,0.0330953374505043,0.01127591636031866,-0.007493132259696722,-0.004430686589330435,0.004539341200143099,-0.004796892404556274,0.0041167959570884705,-0.010124984197318554,0.02659216709434986,-0.017577873542904854,0.005118831526488066,0.022117214277386665,-0.016933996230363846,0.02928035892546177,-0.006889496464282274,0.00524760689586401,-0.0013903743820264935,0.02210111729800701,0.005090661812573671,-0.0355420745909214,-0.000252143683610484,-0.023050837218761444,0.009730609133839607,-0.012346363626420498,0.012756835669279099,0.02282548137009144,-0.03209732472896576,-0.0012877563713118434,0.018962211906909943,0.011106898076832294,0.020330453291535378,0.016169389709830284,-0.0025231975596398115,-0.021537724882364273,0.0005794903263449669,-0.02503076381981373,-0.03182367980480194,0.03206513077020645,0.022761093452572823,-0.03299875557422638,0.015227718278765678,-0.01596817746758461,0.007231556344777346,0.008084694854915142,0.0041167959570884705,0.037344932556152344,-0.017014481127262115,-0.015131136402487755,-0.018672466278076172,-0.007750683464109898,-0.020249968394637108,-0.021586015820503235,-0.0040624686516821384,0.05273362249135971,0.0010020353365689516,0.018801242113113403,0.0204270351678133,0.004845183342695236,0.013465101830661297,0.05019030347466469,-0.009553542360663414,-0.0175617765635252,-0.018398817628622055,0.02181137353181839,0.007798974402248859,0.016966190189123154,-0.0009698414942249656,0.04069310054183006,-0.021344561129808426,0.028362832963466644,-0.029087195172905922,0.00171533168759197,-0.008201397955417633,0.04133697599172592,-0.009577687829732895,0.0075575197115540504,0.029006710276007652,-0.025384895503520966,-0.018656369298696518,0.019509507343173027,0.01711106114089489,-0.00019442102347966284,-0.009231602773070335,0.005267728120088577,0.016756929457187653,-0.031598322093486786,0.032370973378419876,-0.0028089184779673815,0.000746999285183847,0.030664697289466858,-0.0204270351678133,0.04726065695285797,-0.03386799246072769,-0.022229893133044243,0.0010100838262587786,-0.059236790984869,0.01155761256814003,-0.00033023906871676445,0.06387270987033844,0.026415102183818817,0.025916095823049545,-0.011469080112874508,-0.004491050262004137,-0.01841491460800171,0.04619825631380081,-0.0025815488770604134,0.033224113285541534,0.0024547853972762823,0.010817153379321098,-0.05872168764472008,0.02107091248035431,0.042045243084430695,0.028475511819124222,-0.004945788998156786,-0.019412927329540253,0.0025875852443277836,-0.014149222522974014,-0.01353753823786974,0.015775015577673912,-0.0007666174205951393,0.02115139737725258,-0.02789602056145668,0.014994313009083271,0.009295990690588951,-0.011694436892867088,0.010342292487621307,-0.0061530605889856815,0.03409335017204285,0.03567085042595863,0.008837227709591389,-0.02903890423476696,-0.023630328476428986,0.007565568201243877,-0.0045111714862287045,0.014149222522974014,0.012901708483695984,-0.009778899140655994,-0.002084555570036173,-0.0010623990092426538,-0.007573616690933704,-0.03728054463863373,-0.03447967395186424,0.01620963215827942,0.01585550047457218,-0.055083777755498886,0.030680794268846512,0.022310378029942513,-0.0029115364886820316,0.016467183828353882,0.01380313839763403,0.020475326105952263,-0.01625792309641838,0.01266025472432375,-0.02066848799586296,-0.010623989626765251,0.01662815362215042,0.022970354184508324,0.0726938471198082,0.04771137237548828,-0.02008899860084057,-0.005030298139899969,-0.021988438442349434,-0.025513671338558197,-0.004132892936468124,-0.007046441547572613,-0.0087808882817626,0.012257830239832401,0.002128822263330221,-0.018060782924294472,-0.021103106439113617,0.019139278680086136,-0.023388873785734177,-0.0023320461623370647,0.029344746842980385,-0.030825667083263397,0.001378301647491753,-0.023469358682632446,0.02205282635986805,0.01641889289021492,0.012555624358355999,0.004346177447587252,-0.0600416399538517,0.03682982921600342,-0.016740832477808,0.019799252972006798,-0.020636295899748802,0.005287849344313145,-0.026205841451883316,-0.047035299241542816,0.013666314072906971,0.005871363915503025,-0.007452889811247587,-0.028443317860364914,-0.0019155375193804502,-0.01715935207903385,-0.021666500717401505,0.011469080112874508,0.011605903506278992,-0.0020322403870522976,-0.018527593463659286,-0.018076879903674126,-0.05080198496580124,0.00401216559112072,-0.014149222522974014,0.03795661777257919,-0.006772793363779783,-0.03047153353691101,0.013344374485313892,-0.018736854195594788,0.004800916649401188,-0.021038718521595,0.033352889120578766,-0.013835332356393337,-0.026495587080717087,-0.024451272562146187,-0.037344932556152344,-0.0177710372954607,0.006704381201416254,-0.044331010431051254,0.03528452292084694,-0.015839403495192528,0.009255748242139816,0.03087395802140236,0.003330057254061103,0.019944125786423683,-0.0009019324788823724,0.021827468648552895,-0.026189744472503662,0.033674828708171844,-0.011187382973730564,0.026173647493124008,0.021907953545451164,-0.013143163174390793,-0.038697078824043274,0.007364356424659491,-0.0005075570661574602,-0.018286140635609627,-0.0031469545792788267,-0.018237849697470665,-0.016265971586108208,0.0058753881603479385,0.014849440194666386,0.014430919662117958,-0.03270900994539261,0.005364309996366501,0.018720757216215134,0.018817339092493057,-0.0204270351678133,0.016145244240760803,0.017416903749108315,-0.051445864140987396,-0.012901708483695984,0.007034368813037872,-0.045522186905145645,-0.004555438179522753,0.01670863851904869,0.01270049624145031,0.006466951221227646,-0.009030391462147236,-0.008611869998276234,-0.034608449786901474,0.020362647250294685,-0.01682131737470627,0.008080670610070229,0.04349397122859955,-0.021666500717401505,0.003897475078701973,-0.0267531368881464,-0.016563765704631805,0.02810528129339218,0.008684306405484676,0.03328850120306015,0.0183827206492424,0.0006795933004468679,0.04207743704319,0.021924050524830818,0.005138952750712633,0.0050584678538143635,0.01106665562838316,-0.02393617108464241,0.026640458032488823,-0.009384524077177048,-0.008732597343623638,-0.01862417533993721,-0.028089184314012527,0.040049221366643906,-0.004048383794724941,-0.0064468299970030785,-0.008483095094561577,0.033803604543209076,-0.010970073752105236,0.003519196528941393,-0.0036358993966132402,0.016249874606728554,-0.021457239985466003,-0.026044871658086777,0.013207551091909409,-0.030568115413188934,0.024242011830210686,0.00610476965084672,-0.013875573873519897,0.024242011830210686,-0.033803604543209076,0.02977936528623104,-0.011010316200554371,0.019268054515123367,-0.013593877665698528,-0.050093721598386765,-0.02670484595000744,0.012442945502698421,-0.025433186441659927,-0.021714791655540466,0.02029825933277607,0.030857861042022705,0.005179194733500481,-0.009312087669968605,0.00734021095559001,0.013328277505934238,0.023630328476428986,-0.007984088733792305,0.009505251422524452,-0.020523617044091225,-0.02123188227415085,0.10340683162212372,-0.003195245284587145,0.0022455251310020685,-0.012708544731140137,0.00894185807555914,-0.02598048374056816,-0.03666885942220688,-0.006245618220418692,-0.0026962398551404476,0.03230658546090126,0.008974052034318447,-0.012370509095489979,0.02160211279988289,-0.004990055691450834,0.01519552432000637,-0.009344281628727913,0.0078110471367836,-0.0025553915183991194,-0.004909570794552565,-0.008813082240521908,0.004527268465608358,0.011010316200554371,0.01497016754001379,-0.002985985018312931,-0.028153572231531143,-0.034447479993104935,0.002060410100966692,0.018109073862433434,-0.0013662289129570127,0.038214169442653656,0.019589992240071297,-0.003969911485910416,0.01488968264311552,0.003330057254061103,0.001604665070772171,0.01833442971110344,0.0019296223763376474,-0.01833442971110344,0.000346587534295395,-0.012056618928909302,-0.023501552641391754,-0.014841391704976559,-0.03319191932678223,-0.006748647894710302,0.01875295117497444,0.0028471488039940596,0.018559787422418594,0.010535456240177155,-0.008949906565248966,-0.001933646621182561,-0.0025231975596398115,0.007291920017451048,0.03660447150468826,0.00935233011841774,-0.03422212228178978,-0.032692912966012955,0.008402610197663307,0.002265646355226636,-0.023421067744493484,-0.001834046677686274,-0.01920366659760475,0.0029900092631578445,-0.027380919083952904,0.0202177744358778,-0.02760627679526806,-0.006378417834639549,0.0037485782522708178,-0.010696426033973694,0.02189185656607151,0.012949999421834946,-0.022616220638155937,0.0555344894528389,-0.0035916329361498356,0.0022877794690430164,-0.010503262281417847,0.015734773129224777,0.013215599581599236,-0.015758918598294258,0.024402981624007225,0.006193303037434816,-0.000806356780230999,0.016306214034557343,0.0009738657390698791,-0.011324207298457623,0.023083031177520752,0.004982007201761007,0.0008526355377398431,0.017304224893450737,-0.034286510199308395,-0.017513485625386238,-0.009336233139038086,0.011461031623184681,0.009553542360663414,0.017674455419182777,-0.009086730889976025,-0.007460938300937414,-0.03238707035779953,-0.010825201869010925,0.015300154685974121,-0.03860049694776535,-0.013368519954383373,0.007348259445279837,0.02090994268655777,-0.01171858236193657,-0.021167494356632233,0.01551746390759945,-0.046745553612709045,-0.02882964536547661,0.03393238037824631,-0.028765257447957993,0.016016468405723572,0.007959944196045399,0.020040707662701607,-0.020942136645317078,0.012370509095489979,0.01657986268401146,0.005996115505695343,-0.011444934643805027,-0.008072622120380402,-0.0007585689309053123,0.012636109255254269,0.014286046847701073,0.017529582604765892,-0.027879923582077026,0.026737039908766747,0.008426755666732788,0.015428930521011353,-0.030487630516290665,0.019750962033867836,-0.02589999884366989,-0.013465101830661297,-0.019380733370780945,0.017094966024160385,-0.014833343215286732,0.017497388646006584,0.005561497528105974,-0.007215459831058979,0.0020805313251912594,-0.02985985018312931,0.013497295789420605,-0.031920257955789566,0.008515289053320885,0.01141274068504572,-0.016612056642770767,0.015235766768455505,-0.014181416481733322,0.003422614885494113,0.017368612810969353,0.037924423813819885,-0.006788890343159437,-0.007613859139382839,-0.007855313830077648,-0.0033944451715797186,-0.006595727056264877,0.03615375980734825,0.017738843336701393,0.006012212485074997,-0.0164430383592844,-0.023871783167123795,0.0400170274078846,0.02274499647319317,-0.018978308886289597,0.002148943254724145,-0.018125170841813087,-0.0014004349941387773,0.024209817871451378,-0.015050651505589485,0.018157364800572395,0.010937879793345928,-0.02324400097131729,0.02029825933277607,-0.014543597586452961,0.02470882423222065,0.011734679341316223,0.029875947162508965,-0.031051024794578552,0.009497202932834625,0.031131509691476822,-0.012555624358355999,0.025916095823049545,0.02324400097131729,0.011348352767527103,-0.005629909690469503,0.018978308886289597,0.01809297688305378,0.018076879903674126,-0.010849347338080406,-0.02263231761753559,-0.0057224673219025135,-0.014237755909562111,0.004897498060017824,-0.016853511333465576,0.01764226146042347,0.0320490337908268,0.01923586055636406,0.020394841209053993,-0.02821796014904976,0.02670484595000744,0.02013728953897953,0.029409134760499,-0.006672187242656946,0.007151071913540363,-0.01405264064669609,0.015098942443728447,0.007923725992441177,-0.008153107017278671,-0.003114760620519519,0.007464962545782328,0.006281836424022913,-0.005959897302091122,0.01607280783355236,0.011613951995968819,0.002315949182957411,0.0133765684440732,0.002925621345639229,0.00861991848796606,-0.055115971714258194,0.019219763576984406,0.013835332356393337,-0.04829086363315582,0.03985605761408806,0.015115039423108101,-0.01459993701428175,-0.029714977368712425,0.0036399236414581537,0.020121192559599876,0.024885891005396843,-0.01567843370139599,0.003114760620519519,0.0028833667747676373,0.003446760354563594,-0.021457239985466003,-0.03940534219145775,-0.021167494356632233,-0.01270049624145031,-0.014068737626075745,-0.04201304912567139,0.0015000349376350641,-0.023871783167123795,-0.013787041418254375,-0.015364542603492737,0.03438309207558632,-0.026495587080717087,0.03172709792852402,-0.016740832477808,0.013360471464693546,0.013513392768800259,0.02181137353181839,0.00458360742777586,-0.005122855771332979,-0.04104723408818245,-0.002877330407500267,-0.001421562279574573,0.000873762764967978,-0.012426848523318768,0.007843241095542908,-0.029537910595536232,-0.014060689136385918,0.01846320554614067,0.00476872269064188,0.011935891583561897,0.005815024487674236,0.030519824475049973,0.029022807255387306,0.008788936771452427,0.019831446930766106,-0.01372265350073576,0.026254132390022278,-0.0296183954924345,-0.021634306758642197,-0.017175449058413506,-0.011114946566522121,0.011324207298457623,-0.027010688558220863,-0.008829179219901562,0.029071098193526268,0.005517230834811926,0.001354156294837594,-0.012829272076487541,-0.03002081997692585,-0.017980298027396202,-0.019831446930766106,-0.02552976831793785,-0.013086823746562004,-0.0006564538925886154,-0.015227718278765678,-0.02911938913166523,0.003376336069777608,0.04726065695285797,0.03393238037824631,0.03760248422622681,0.03860049694776535,-0.006487072445452213,0.018286140635609627,-0.004454832058399916,0.001960810273885727,0.0028833667747676373,-0.019573895260691643,0.008764791302382946,0.016901802271604538,0.024724921211600304,-0.032000742852687836,0.019412927329540253,-0.009320136159658432,-0.004458856303244829,-0.013038532808423042,0.010398631915450096,0.0015996347647160292,0.019139278680086136,0.026801427826285362,0.040210191160440445,0.0019376708660274744,0.008016282692551613,-0.03364263474941254,0.016644250601530075,-0.040532130748033524,0.021553821861743927,-0.0011519382242113352,-0.003287802916020155,0.012692447751760483,0.027622373774647713,0.037634678184986115,0.0208294577896595,0.010068644769489765,-0.00916721485555172,-0.03095444291830063,0.006829132791608572,-0.013553635217249393,0.010656183585524559,-0.01329608354717493,-0.012692447751760483,-0.00743276858702302,0.03129247948527336,-0.026656555011868477,-0.011750776320695877,0.03927656635642052,-0.007959944196045399,0.041658915579319,0.002464846009388566,-0.010374486446380615,-0.0072194840759038925,-0.01141274068504572,-0.003446760354563594,-0.00705449003726244,0.007328138221055269,0.024853697046637535,0.015960128977894783,-0.010318147949874401,0.0064830482006073,0.015284057706594467,0.04771137237548828,-0.020249968394637108,0.0017897801008075476,-0.003573523834347725,-0.044170040637254715,-0.013666314072906971,0.027622373774647713,-0.00927184522151947,-0.04191646724939346,0.026720942929387093,0.009094779379665852,-0.03212951868772507,-0.019058793783187866,-0.001718349871225655,-0.029908141121268272,-0.008322125300765038,-0.000024805656721582636,0.009279893711209297,0.00228174333460629,0.003309936262667179,-0.001181113999336958,-0.007867386564612389,-0.014430919662117958,0.006736575160175562,-0.008507240563631058,-0.0259321928024292,-0.013666314072906971,-0.0012736715143546462,-0.008124937303364277,-0.0436871312558651,0.026334617286920547,-0.036733247339725494,0.04304325580596924,0.04716407507658005,-0.00976280216127634,-0.02090994268655777,0.0009778899839147925,0.022358668968081474,0.029634492471814156],
}

/**
 * Deletes all rows from curr_matches table.
 */
export async function clearCurrMatchesTable() {
    const { error } = await supabase
        .from('curr_matches')
        .delete()
        .not('person1_id', 'is', null); // delete every row where person1_id is not null

    if (error) {
        console.error('Failed to clear curr_matches table:', error);
        process.exit(1);
    }

    console.log('Deleted all rows from curr_matches table.');
}

/**
 * FETCHES EVERY ROW OF form_responses.
 * IF THE vector_embeddings COLUMN IS NOT ALREADY POPULATED WITH A numeric[],
 * GENERATE THE VECTOR EMBEDDING USING OPENAI's 'text-embedding-3-small' MODEL.
 * IF THERE IS AN ODD NUMBER OF PEOPLE, PUSH odd_participant TO THE TABLE IF NOT ALREADY THERE. 
 */
export async function updateFormResponsesTableWithVectorEmbeddings() {

  // fetch every row
  const { data: rows, error: fetchErr } = await supabase
    .from('form_responses')
    .select('*');
  if (fetchErr) throw fetchErr;
  if (!rows) return;

  for (const row of rows) { // for each row, build participant structure

    // Skip if vector_embedding already exists and is non-empty
    if (row.vector_embedding && row.vector_embedding.length > 0) {
      console.log(`Vector for ${row.id} already exists, skipping.`);
      continue;
    }

    const p: Participant = {
      ...row,
      class_seat: row.class_seat,
      evil_hobby: row.evil_hobby,
      most_likely_to: row.most_likely_to,
      caught_watching: row.caught_watching,
    };

    const textForEmbed = [ // concatenate everything for OpenAI embedding input
      p.program,
      p.year,
      p.career,
      p.friend_traits,
      p.self_desc,
      p.goal,
      p.fun,
      p.music,
      getMCAnswer('class_seat', p.class_seat), // turned MC answer [a, b, c, d, e] into its string response
      getMCAnswer('evil_hobby', p.evil_hobby),
      getMCAnswer('most_likely_to', p.most_likely_to),
      getMCAnswer('caught_watching', p.caught_watching),
    ].join(' • '); // separator for each field

    const embedRes = await openai.embeddings.create({ // create vector embedding
      model: 'text-embedding-3-small', // smaller embedding vectors to save Jacob's $4 money.
      input: textForEmbed,
    });
    const vector = embedRes.data[0].embedding;

    const { error: updErr } = await supabase
      .from('form_responses')
      .update({ vector_embedding: vector }) // insert into supabase the vector_embedding
      .eq('id', p.id);

    if (updErr) {
      console.error(`Failed to update embedding for ${p.id}:`, updErr);
    } else {
      console.log(`Updated embedding for ${p.id}`);
    }
  }
}

/**
 * If the array has odd length:
 * - If the odd_participant is there, remove them to make the length even.
 * - If the odd_participant is not there, add them to make the length even.
 */
export async function handleOddParticipant(participants: { id: string }[]) {
  const oddParticipantExists = participants.some(p => p.id === odd_participant.id);

  if (participants.length % 2 === 1 && !oddParticipantExists) { // odd number of people, and haven't inserted the hard-coded value yet.
    await supabase
      .from('form_responses')
      .insert([odd_participant]); // insert the hard-coded odd_participant. 
    console.log('There is an odd number of people, not including odd_participant. Added them to form_responses. ');
  } else if (participants.length % 2 === 1 && oddParticipantExists) { // odd number of people, and hard-coded odd_participant is one of them.
    await supabase
      .from('form_responses')
      .delete() // remove the hard-coded odd_participant. 
      .eq('id', odd_participant.id);
    console.log('There is an odd number of people, including odd_participant. Removed them from form_responses. ');
  } else { // no action needed, print helpful message. 
    console.log('There is an even number of people. No parity-related handling is required. ');
  }
}

/**
 * ASSUMES EVERY ROW IN form_responses HAS A VALID vector_embedding ENCODED AS A numeric[]. 
 * ASSUMES THERE IS AN EVEN NUMBER OF PARTICIPANTS IN form_responses, AS HANDLED BY handleOddParticipant. 
 * ASSUMES THE curr_matches TABLE IS EMPTY, AS HANDLED BY clearCurrMatchesTable. 
 * RUNS cosineSimilarity[] TO GATHER THE CLOSEST VECTOR PAIRS, MATCHING THEM WITH GREEDY ALGORITHM. 
 * RETURNS ARRAY OF Match TO BE INSERTED INTO curr_matches TABLE and the previous_matches TABLE. 
 */
export async function matchParticipants(): Promise<Match[]> {
  // fetch everyone’s id + embedding
  const { data: rows, error: fetchErr } = await supabase
    .from('form_responses')
    .select('id, vector_embedding');
  if (fetchErr) {
    console.error('Could not fetch embeddings:', fetchErr);
    throw fetchErr;
  }
  if (!rows) return [];

  // build all pairwise similarities
  type Pair = { i: number; j: number; sim: number };
  const pairs: Pair[] = [];
  for (let i = 0; i < rows.length; i++) {
    const vi = rows[i].vector_embedding!;
    for (let j = i + 1; j < rows.length; j++) {
      const vj = rows[j].vector_embedding!;
      pairs.push({ i, j, sim: cosineSimilarity(vi, vj) });
    }
  }

  // determine already_matched array from previous_matches table 
  const { data: already_matched, error: prevErr } = await supabase
    .from('previous_matches')
    .select('id, matched_with'); // get the id: uuid, matched_with: uuid[]
  if (prevErr) throw prevErr;

  // map each participant → set of UUIDs they’ve already been matched with
  const prevMap = new Map<string, Set<string>>();
  for (const { id, matched_with } of already_matched || []) {
    prevMap.set(id, new Set(matched_with));
  }

  // greedy match: pick best pairs without reusing any participant
  const used = new Set<number>();
  const matches: Match[] = [];

  pairs.sort((a, b) => b.sim - a.sim); // sort descending by similarity

  for (const { i, j, sim } of pairs) { // for each pair and similarity
    const id1 = rows[i].id, id2 = rows[j].id;
    
    // skip if either is already in a new match
    if (used.has(i) || used.has(j)) continue;

    // skip if they’ve met before
    const met1 = prevMap.get(id1)?.has(id2) ?? false;
    const met2 = prevMap.get(id2)?.has(id1) ?? false;
    if (met1 || met2) continue;

    // otherwise take this pair
    used.add(i);
    used.add(j);
    matches.push({ person1_id: id1, person2_id: id2, similarity_score: sim, emoji: '' });

    if (used.size === rows.length) break;
  }

  // return the array of Match
  return matches;
}

// TAKES AN ARRAY Match[] AND UPDATES curr_matches WITH EACH ENTRY. 
// curr_matches TABLE MATCHES EXACTLY THE STRUCTURE OF Match: person1_id (uuid), person2_id (uuid), similarity_score (float8), emoji (text). 
export async function updateCurrMatches(matches: Match[]): Promise<Match[]> {

  if (matches.length === 0) { // Print helpful log message if matches: Match[] is an empty array. 
    console.log('No matches to insert into curr_matches.');
    return [];
  }

  const { data, error } = await supabase
    .from('curr_matches')
    .insert(matches) // insert all matches into the table curr_matches. 
    .select('*');

  if (error) { // catch error if occurred.
    console.error('Failed to update curr_matches:', error);
    throw error;
  }

  console.log(`Inserted ${data?.length ?? 0} matches into curr_matches.`);
  return data ?? [];

}

/**
 * Helper: inserts or appends a single side of a match into previous_matches.
 */
async function updatePreviousMatchesForParty(
  ownerId: string,
  partnerId: string,
  similarity_score: number,
  emoji: string
): Promise<void> {
  // fetch existing row if any
  const { data: prevRow, error: fetchErr } = await supabase
    .from('previous_matches')
    .select('matched_with, similarity_scores, emojis')
    .eq('id', ownerId)
    .maybeSingle();
  if (fetchErr) {
    console.error('Error fetching previous_matches for', ownerId, fetchErr);
    return;
  }

  if (!prevRow) {
    // no existing row: fetch email and insert new
    const { data: formRow, error: formErr } = await supabase
      .from('form_responses')
      .select('email')
      .eq('id', ownerId)
      .single();
    if (formErr || !formRow) {
      console.error('Error fetching email for', ownerId, formErr);
      return;
    }
    const { email } = formRow;
    const { error: insertErr } = await supabase
      .from('previous_matches')
      .insert([{ 
        id: ownerId,
        email,
        matched_with: [partnerId],
        similarity_scores: [similarity_score],
        emojis: [emoji]
      }]);
    if (insertErr) {
      console.error('Error inserting previous_matches for', ownerId, insertErr);
    } else {
      console.log('Created previous_matches row for', ownerId);
    }
  } else {
    // existing row: append non-duplicates
    const newMatchedWith = prevRow.matched_with.includes(partnerId)
      ? prevRow.matched_with
      : [...prevRow.matched_with, partnerId];
    const newSim = prevRow.similarity_scores.includes(similarity_score)
      ? prevRow.similarity_scores
      : [...prevRow.similarity_scores, similarity_score];
    const newEmojis = prevRow.emojis.includes(emoji)
      ? prevRow.emojis
      : [...prevRow.emojis, emoji];
    const { error: updateErr } = await supabase
      .from('previous_matches')
      .update({ matched_with: newMatchedWith, similarity_scores: newSim, emojis: newEmojis })
      .eq('id', ownerId);
    if (updateErr) {
      console.error('Error updating previous_matches for', ownerId, updateErr);
    } else {
      console.log('Updated previous_matches row for', ownerId);
    }
  }
}

// TAKES AN ARRAY Match[] AND APPENDS THE UUID Match.person2_id TO Match.person1_id's ROW. 
// ALSO APPENDS THE Match.similarity_score TO THE similarity_scores[] OF Match.person1_id's ROW, 
// AND THE Match.emoji TO THE emojis[] OF Match.person1_id's ROW.
// IF ROW FOR Match.person1_id DOES NOT ALREADY EXIST, CREATES A ROW.
// REPEATS THIS PERSON FOR ALL Match.person2_id's (since a Match is a pair, we need to account for both parties of the pair). 
export async function updatePreviousMatches(matches: Match[]): Promise<void> {
  if (matches.length === 0) {
    console.log('No matches to update in previous_matches.');
    return;
  }

  for (const m of matches) {
    const { person1_id, person2_id, similarity_score, emoji } = m;
    // update for both sides
    await updatePreviousMatchesForParty(person1_id, person2_id, similarity_score, emoji);
    await updatePreviousMatchesForParty(person2_id, person1_id, similarity_score, emoji);
  }
}
